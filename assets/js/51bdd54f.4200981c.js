"use strict";(self.webpackChunkxef_website=self.webpackChunkxef_website||[]).push([[661],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=u(n),m=r,h=p["".concat(s,".").concat(m)]||p[m]||d[m]||o;return n?a.createElement(h,l(l({ref:t},c),{},{components:n})):a.createElement(h,l({ref:t},c))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[p]="string"==typeof e?e:r,l[1]=i;for(var u=2;u<o;u++)l[u]=n[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},85162:(e,t,n)=>{n.d(t,{Z:()=>l});var a=n(67294),r=n(86010);const o={tabItem:"tabItem_Ymn6"};function l(e){let{children:t,hidden:n,className:l}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(o.tabItem,l),hidden:n},t)}},74866:(e,t,n)=>{n.d(t,{Z:()=>w});var a=n(87462),r=n(67294),o=n(86010),l=n(12466),i=n(16550),s=n(91980),u=n(67392),c=n(50012);function p(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}function d(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??p(n);return function(e){const t=(0,u.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function m(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function h(e){let{queryString:t=!1,groupId:n}=e;const a=(0,i.k6)(),o=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,s._X)(o),(0,r.useCallback)((e=>{if(!o)return;const t=new URLSearchParams(a.location.search);t.set(o,e),a.replace({...a.location,search:t.toString()})}),[o,a])]}function f(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,o=d(e),[l,i]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:o}))),[s,u]=h({queryString:n,groupId:a}),[p,f]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,o]=(0,c.Nk)(n);return[a,(0,r.useCallback)((e=>{n&&o.set(e)}),[n,o])]}({groupId:a}),b=(()=>{const e=s??p;return m({value:e,tabValues:o})?e:null})();(0,r.useLayoutEffect)((()=>{b&&i(b)}),[b]);return{selectedValue:l,selectValue:(0,r.useCallback)((e=>{if(!m({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);i(e),u(e),f(e)}),[u,f,o]),tabValues:o}}var b=n(72389);const g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function y(e){let{className:t,block:n,selectedValue:i,selectValue:s,tabValues:u}=e;const c=[],{blockElementScrollPositionUntilNextRender:p}=(0,l.o5)(),d=e=>{const t=e.currentTarget,n=c.indexOf(t),a=u[n].value;a!==i&&(p(t),s(a))},m=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=c.indexOf(e.currentTarget)+1;t=c[n]??c[0];break}case"ArrowLeft":{const n=c.indexOf(e.currentTarget)-1;t=c[n]??c[c.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":n},t)},u.map((e=>{let{value:t,label:n,attributes:l}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:i===t?0:-1,"aria-selected":i===t,key:t,ref:e=>c.push(e),onKeyDown:m,onClick:d},l,{className:(0,o.Z)("tabs__item",g.tabItem,l?.className,{"tabs__item--active":i===t})}),n??t)})))}function v(e){let{lazy:t,children:n,selectedValue:a}=e;const o=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=o.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},o.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function k(e){const t=f(e);return r.createElement("div",{className:(0,o.Z)("tabs-container",g.tabList)},r.createElement(y,(0,a.Z)({},e,t)),r.createElement(v,(0,a.Z)({},e,t)))}function w(e){const t=(0,b.Z)();return r.createElement(k,(0,a.Z)({key:String(t)},e))}},65830:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>i,metadata:()=>u,toc:()=>p});var a=n(87462),r=(n(67294),n(3905)),o=n(74866),l=n(85162);const i={id:"sql",title:"SQL",sidebar_position:1,description:"The SQL module facilitates SQL query generation and execution.",sidebar_custom_props:{icon:"icon-sql.svg"}},s='<decorated-text icon="icon-sql.svg" title="Integrations - SQL" />',u={unversionedId:"learn/integrations/sql",id:"learn/integrations/sql",title:"SQL",description:"The SQL module facilitates SQL query generation and execution.",source:"@site/content/docs/learn/integrations/sql.md",sourceDirName:"learn/integrations",slug:"/learn/integrations/sql",permalink:"/learn/integrations/sql",draft:!1,editUrl:"https://github.com/xebia-functional/xef-website/edit/main/content/docs/learn/integrations/sql.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{id:"sql",title:"SQL",sidebar_position:1,description:"The SQL module facilitates SQL query generation and execution.",sidebar_custom_props:{icon:"icon-sql.svg"}},sidebar:"learnSidebar",previous:{title:"Integrations",permalink:"/learn/integrations/"},next:{title:"More examples",permalink:"/learn/examples"}},c={},p=[{value:"Overview",id:"overview",level:2},{value:"Getting the libraries",id:"getting-the-libraries",level:2},{value:"Supported Databases",id:"supported-databases",level:2},{value:"Getting Started",id:"getting-started",level:2},{value:"Usage",id:"usage",level:2}],d={toc:p},m="wrapper";function h(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"decorated-text-iconicon-sqlsvg-titleintegrations---sql-"},(0,r.kt)("decorated-text",{icon:"icon-sql.svg",title:"Integrations - SQL"})),(0,r.kt)("h2",{id:"overview"},"Overview"),(0,r.kt)("p",null,"The SQL module facilitates SQL query generation and execution. This documentation will guide you through the installation and usage of this module."),(0,r.kt)("h2",{id:"getting-the-libraries"},"Getting the libraries"),(0,r.kt)("p",null,"Ensure that you include the SQL module in your project. You can do so by adding the following dependencies to your project's build configuration:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-gradle"},'repositories {\n    mavenCentral()\n}\n\ndependencies {\n    implementation("com.xebia:xef-core:<version>")\n    implementation("com.xebia:xef-sql:<version>")\n}\n')),(0,r.kt)("p",null,"We publish all libraries at once under the same version, so\n",(0,r.kt)("a",{parentName:"p",href:"https://docs.gradle.org/current/userguide/platforms.html#sec:sharing-catalogs"},"version catalogs"),"\ncould be useful."),(0,r.kt)("p",null,"By default, Xef connects to ",(0,r.kt)("a",{parentName:"p",href:"https://platform.openai.com/"},"OpenAI"),".\nTo use their services you should provide the corresponding API key in the ",(0,r.kt)("inlineCode",{parentName:"p"},"OPENAI_TOKEN"),"\nenvironment variable, and have enough credits."),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"gradle",label:"Gradle",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"env OPENAI_TOKEN=<your-token> <gradle-command>\n"))),(0,r.kt)(l.Z,{value:"intellij",label:"IntelliJ",mdxType:"TabItem"},(0,r.kt)("p",null,"Set the environment variable ",(0,r.kt)("inlineCode",{parentName:"p"},"OPENAI_TOKEN=xxx")," in the properties."))),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"This library may transmit source code and potentially user input data to third-party services as part of its functionality.\nDevelopers integrating this library into their applications should be aware of this behavior and take necessary precautions to ensure that sensitive data is not inadvertently transmitted.\nRead our ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/xebia-functional/xef#%EF%B8%8F-data-transmission-disclosure"},(0,r.kt)("em",{parentName:"a"},"Data Transmission Disclosure"))," for further information.")),(0,r.kt)("h2",{id:"supported-databases"},"Supported Databases"),(0,r.kt)("p",null,"The SQL module is built upon the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/JetBrains/Exposed"},"Exposed")," library, which means it is compatible with a variety of relational databases. Below is a list of some common databases that are compatible with the SQL Module:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"MySQL"),(0,r.kt)("li",{parentName:"ol"},"PostgreSQL"),(0,r.kt)("li",{parentName:"ol"},"SQLite"),(0,r.kt)("li",{parentName:"ol"},"Microsoft SQL Server"),(0,r.kt)("li",{parentName:"ol"},"H2 Database"),(0,r.kt)("li",{parentName:"ol"},"Oracle Database"),(0,r.kt)("li",{parentName:"ol"},"MariaDB")),(0,r.kt)("p",null,"Ensure you have the corresponding database driver library added to your project's dependencies."),(0,r.kt)("p",null,"For example, if you plan to use MySQL, include the MySQL JDBC driver in your project's build configuration"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-gradle"},'dependencies {\n    implementation("mysql:mysql-connector-java:<version>")\n}\n')),(0,r.kt)("h2",{id:"getting-started"},"Getting Started"),(0,r.kt)("p",null,"To get started with the SQL module, you must initialize it with your database configuration and the model."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'JdbcConfig(\n  vendor = "mysql",\n  host = "localhost",\n  username = "your_username",\n  password = "top_secret_password",\n  port = 3306,\n  database = "my_db",\n  model = OpenAI().DEFAULT_SERIALIZATION\n)\n')),(0,r.kt)("p",null,"Once the configuration is set, you can generate and execute SQL queries based on user prompts and contextual information using the primary function promptQuery. It returns an AnswerResponse object, which includes query results and a friendly sentence."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'val prompt = "How many users are active?"\nval tableNames = listOf("users")\n\nConversation {\n  SQL.fromJdbcConfig(jdbcConfig) {\n    val answer = promptQuery(prompt, tableNames, null)\n  }\n}\n')),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("p",null,"Let's take a look at a more complete example to understand how it works."),(0,r.kt)("p",null,'Suppose you have a table named "sales" with the following structure:'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-mysql"},"CREATE TABLE sales (\n    id INTEGER PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    quantity INTEGER NOT NULL,\n    amount NUMERIC(10, 2) NOT NULL,\n    category VARCHAR(255) NOT NULL,\n    created_at DATE NOT NULL,\n    customer_name VARCHAR(255) NOT NULL\n);\n")),(0,r.kt)("p",null,"The module is able to get the schema from the table without the need to specify it, you just have to tell it the name of the table. "),(0,r.kt)("p",null,"However, in order to make specific queries efficiently, it will be necessary to provide a more extensive context, such as possible enumerations or values that cannot be inferred from the table schema."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'import com.xebia.functional.xef.sql.jdbc.JdbcConfig\nimport com.xebia.functional.xef.sql.SQL\nimport ai.xef.openai.StandardModel\nimport com.xebia.functional.openai.apis.ChatApi\nimport com.xebia.functional.openai.models.CreateChatCompletionRequestModel\nimport com.xebia.functional.xef.conversation.Conversation\n\nsuspend fun main() {\n  val mysql = JdbcConfig(\n    vendor = "mysql",\n    host = "localhost",\n    username = "your_username",\n    password = "top_secret_password",\n    port = 3306,\n    database = "my_db",\n    model = StandardModel(CreateChatCompletionRequestModel.gpt_4_1106_preview),\n    chatApi = fromEnvironment(::ChatApi)\n  )\n\n  val context = """\n        These are the existing values for some fields:\n        - The field "amount" represents the total sales amount in USD.\n        - The field "product_name" contains the name of the product, and examples include "Smartphone", "Laptop", "Tablet", etc.\n        - The field "quantity" is the quantity of products sold, expressed as an integer (e.g., 5, 10, 20).\n        - The field "category" categorizes the products, including: "Electronics", "Accessories", "Appliances", "Clothing", "Furniture.\n        - The field "created_at" contains the date of the sale in the format "YYYY-MM-DD".\n        - The field "customer_name" represents the name of the customer who made the purchase.\n    """.trimIndent()\n\n  Conversation {\n    SQL.fromJdbcConfig(mysql) {\n      val answer1 = promptQuery("Show me all the sales made today", listOf("sales"), context)\n      val answer2 = promptQuery("How much money has been earned in sales this month?", listOf("sales"), context)\n    }\n  }\n}\n')),(0,r.kt)("p",null,"Once the context has been added, if we execute the prompts we should get a response with the following structure:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'answer1 = AnswerResponse(\n    input = "Show me all the sales made today",\n    answer = "Here are the sales made today:",\n    mainQuery = "SELECT * FROM sales WHERE created_at = CURDATE()",\n    detailedQuery = null,\n    mainTable = QueryResult(\n        columns = listOf(\n          Column(name=id, type=INT),\n          Column(name=product_name, type=VARCHAR),\n          Column(name=quantity, type=INT),\n          Column(name=amount, type=DECIMAL),\n          Column(name=category, type=VARCHAR),\n          Column(name=created_at, type=DATE),\n          Column(name=customer_name, type=VARCHAR)\n        ),\n        rows = listOf(\n            listOf("1", "Smartphone", "5", "150.00", "Electronics", "2023-11-03", "John Doe"),\n            listOf("2", "Laptop", "3", "75.00", "Electronics", "2023-11-03", "Jane Smith"),\n            listOf("3", "Tablet", "2", "30.00", "Electronics", "2023-11-03", "Bob Johnson")\n        )\n    ),\n    detailedTable = null\n)\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'answer2 = AnswerResponse(\n    input = "How much money has been earned in sales this month?",\n    answer = "The total earnings for this month are 255.00$",\n    mainQuery = "SELECT SUM(amount) AS total_earned FROM sales WHERE MONTH(created_at) = MONTH(CURDATE())",\n    detailedQuery = null,\n    mainTable = QueryResult(\n        columns = listOf(\n            Column("total_earnings", "DECIMAL")\n        ),\n        rows = listOf(\n            listOf("255.00")\n        )\n    ),\n    detailedTable = null\n)\n')),(0,r.kt)("p",null,"If you want to see a more complete example you can go ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/xebia-functional/xef/tree/main/examples/src/main/kotlin/com/xebia/functional/xef/conversation/sql/MysqlExample.kt"},"here"),"."))}h.isMDXComponent=!0}}]);